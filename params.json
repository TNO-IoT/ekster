{"name":"Ekster","tagline":"XMPP Internet of Things discovery component","body":"# Ekster: XMPP IoT Registry component\r\n\r\nEkster, the [XMPP](http://www.xmpp.org) [IoT Registry](http://xmpp.org/extensions/xep-0347.html), is an external [XMPP component](http://xmpp.org/extensions/xep-0114.html) that can be used to register, claim and discover XMPP IoT devices.\r\n\r\nEkster is the Dutch word for [Magpie](https://en.wikipedia.org/wiki/Magpie). In the story _A basket of flowers_ by Lilian Gask (1910) a Magpie steals a golden ring. Our Ekster component _steals_ all of our shiny IoT gadgets and puts it in its nest, the IoT Registry.\r\n\r\nA good start to learn more about Ekster is to read the [XMPP IoT discovery extension: XEP-0347](http://xmpp.org/extensions/xep-0347.html). Ekster aims to implement this XEP.\r\n\r\nFor more information about XMPP and IoT you can checkout [this website](http://www.xmpp-iot.org).\r\n\r\n## License\r\n\r\nEkster is available under a **MIT License** which means that you can basically do anything you want with this code as long as you provide attribution back to us and donâ€™t hold us liable.\r\n\r\n## Roadmap\r\n\r\nEkster is still in development. It is not used in production by us. We believe we've implemented most of of XEP-0347. If you find any bugs or misinterpretations of the XEP please let us know by creating a new issue.\r\n\r\nCurrently our roadmap for Ekster is:\r\n\r\n* Create a more persistent solution for storing data when running Ekster on Docker\r\n* Further testing and improving Ekster\r\n* Validate the current XMPP IoT discovery extension.\r\n\r\n## Running Ekster\r\n\r\nThere are various ways you can run the Ekster component. Our personal favorite is running the component with [docker-compose](https://docs.docker.com/compose/). But you can run Ekster from the command line or as an Heroku application as well.\r\n\r\n### Install and run on Docker\r\n\r\nThe preferred way to run Ekster is using `docker-compose`. A [configuration template](docker-compose-template.yml) is available. Follow these\r\nsteps to run Ekster on a Docker host:\r\n\r\n* First you need to add the Ekster component credentials to your XMPP server. For example on [Prosody](http://prosody.im/doc/components) or [ejabberd](https://www.ejabberd.im/node/5134).\r\n* Copy the template: `cp docker-compose-template.yml docker-compose.yml`\r\n* Edit the `docker-compose.yml`, change the `TODO` items to the target environment.\r\n* Get Ekster up and running using the command `docker-compose up`.\r\n\r\nPlease note that the database that is setup with Ekster currently does not save its data to a datastore. It is kept locally on the mongodb docker container. When you remove that container the data will also be gone.\r\n\r\n### Install and run from the commandline\r\n\r\n* Clone the project from git: `git clone git@github.com:TNO-IoT/ekster.git`\r\n* Go into the folder Ekster was cloned into: `cd ekster`\r\n* Install [nodejs](http://nodejs.org)\r\n* Install coffeescript: `npm install -g coffee-script`\r\n* Start Ekster using the commandline: `src/ekster.coffee`\r\n\r\n```\r\nUsage: ekster.coffee [options]\r\n\r\n  Options:\r\n\r\n    -h, --help                       output usage information\r\n    -V, --version                    output the version number\r\n    -j, --jid <jid>                  jid for the registry\r\n    -P, --password <password>        password for the component\r\n    -H, --host <hostname>            hostname of the XMPP server this component connects to\r\n    -R, --no-reconnect               disable reconnecting to the XMPP server when the connection is lost\r\n    -p, --port [port]                the port to connect to [5347]\r\n    -b, --backend [backend]          the backend to connect to [mongoose]\r\n    -B, --backendHost [backendHost]  the host of the backend [localhost]\r\n    -s, --backendPort [backendPort]  the port where the backend is listening [27017]\r\n    --backendOptions []              the configuration options for the backend []\r\n    -v, --verbose                    verbose logging\r\n\r\n  Examples:\r\n\r\n    $ ekster --help\r\n    $ ekster --jid registry.yourcompany.com --password secret --host xmpp.yourcompany.com --backend mongoose --backendHost localhost --backendPort 27017 --backendOptions '{ \"user\": \"mongouser\", \"pass\": \"mongopass\", \"db\": \"mongodb\" }'\r\n```\r\n\r\n### Install and run on Deis or Heroku\r\n\r\n* Create a configuration file `.env`:\r\n\r\n    ```\r\n    XMPP_JID=<your component jid>\r\n    XMPP_PASSWD=<your component password>\r\n    XMPP_HOST=<your xmpp server host>\r\n    XMPP_PORT=<your xmpp server's component port, ie 5347>\r\n    BACKEND_TYPE=mongoose\r\n    BACKEND_OPTIONS=\\{\\\"user\\\":\\\"iotregistry\\\",\\\"pass\\\":\\\"your password\\\",\\\"db\\\":\\\"registry\\\"\\}\r\n    BACKEND_HOST=<your backend server's hostname>\r\n    BACKEND_PORT=<your backend server port>\r\n    ```\r\n* Test your configuration locally with [foreman](http://blog.daviddollar.org/2011/05/06/introducing-foreman.html): `foreman start`\r\n* Deploy to the PaaS of choice.\r\n\r\n## Development instructions\r\n\r\nThe component is build in [coffeescript](http://coffeescript.org) and needs to have coffeescript installed to run. Coffeescript compiles to javascript hence to be able to run coffeescript you need to have [nodejs](http://nodejs.org) installed on your system.\r\n\r\nTo install a development environment for Ekster please use the instructions below:\r\n\r\n* Install [nodejs](http://nodejs.org)\r\n* Install coffeescript via the node package manager: `npm install coffee-script -g`\r\n* Install the grunt build environment: `npm install grunt-cli -g`\r\n* Install the project dependencies: `npm install --production` (for development you should leave out the `--production`)\r\n\r\nThere is a [Gruntfile](Gruntfile) with the following tasks:\r\n\r\n* `default`: watches the code for changes and, on change, runs the linter and test cases.\r\n* `grunt exec:dev`: runs Ekster in development mode. For this you will change the Gruntfile according to your environment.\r\n* `grunt exec:production`: runs Ekster in production mode: this will get you configuration from environment variables.\r\n\r\nYou can find the source code in `./src`. Test scripts go into `./test`. Currently the [nodeunit](https://www.npmjs.org/package/nodeunit) test framework is used. Details on how to use the [nodeunit test framework with coffeescript is detailed here](http://coffeescriptcookbook.com/chapters/testing/testing_with_nodeunit).\r\n\r\nBefore adding sources to the git repository they should pass the `coffeelint` and `nodeunit` checks. You can run the checks manually by issuing `grunt coffeelint` and `grunt nodeunit`. Or you can run the checks automatically every time you save a file by issuing `grunt watch` or `grunt`.\r\n\r\n### Source code\r\n\r\nBelow you find a list of source files and a short description about what function they provide:\r\n\r\n* [`ekster.coffee`](src/ekster.coffee) - Entry script that creates the connections to the database and XMPP server and starts XMPP stanza processor.\r\n* [`backend.coffee`](src/backend.coffee) - Interface that backend connectors should implement.\r\n* [`logger.coffee`](src/logger.coffee) - Wrapper to the logger module.\r\n* [`mongoose-backend.coffee`](src/mongoose-backend.coffee) - Backend implementation using [mongoose](http://mongoosejs.com) models to write to a mongodb. Currently the default backend for Ekster.\r\n* [`octoblu-backend.coffee`](src/octoblu-backend.coffee) - Backend implementation that uses [octoblu](https://www.octoblu.com) as a backend service. Octoblu rate-limits requests and this may cause unexpected behavior with the registry. Might be outdated...\r\n* [`presence-handler.coffee`](src/presence-handler.coffee) - Handles incoming presence message and friendship relations of the registry.\r\n* [`processor.coffee`](src/processor.coffee) - Handles incoming message for the registry. This is where the XMPP IoT discovery protocol is implemented.\r\n* [`property.coffee`](src/property.coffee) - A name/value pair that a Thing uses to register META information.\r\n* [`thing.coffee`](src/thing.coffee) - The model of a Thing used by the processor.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}